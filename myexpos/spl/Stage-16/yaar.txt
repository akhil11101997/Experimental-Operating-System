
//For Process -2

PTBR=PAGE_TABLE_BASE+(20*2);


//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 88;
[PTBR+5] = "0110";
[PTBR+6] = 89;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 84;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 86;
[PTBR+17] = "0110";
[PTBR+18] = 87;
[PTBR+19] = "0110";


PTLR = 10;

[PROCESS_TABLE +(16*2) + 1] = 2;
[PROCESS_TABLE + 4+(16*2)] = CREATED;
[PROCESS_TABLE +(16*2) + 11] = 90;

[PROCESS_TABLE +(16*2) + 13] = 8*512;

[PROCESS_TABLE +(16*2) + 12] = 0;
[PROCESS_TABLE + (16*2) + 14] = PAGE_TABLE_BASE + (20*2);   // PTBR value
[PROCESS_TABLE + (16*2) + 15] = 10;                     // PTLR value

[86*512] = [84 * 512 + 1];


//For Process -3

PTBR=PAGE_TABLE_BASE+(20*3);


//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 91;
[PTBR+5] = "0110";
[PTBR+6] = 92;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 93;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 94;
[PTBR+17] = "0110";
[PTBR+18] = 95;
[PTBR+19] = "0110";


PTLR = 10;

[PROCESS_TABLE +(16*3) + 1] = 3;
[PROCESS_TABLE + 4+(16*3)] = CREATED;
[PROCESS_TABLE +(16*3) + 11] = 96;

[PROCESS_TABLE +(16*2) + 13] = 8*512;

[PROCESS_TABLE +(16*2) + 12] = 0;
[PROCESS_TABLE + (16*2) + 14] = PAGE_TABLE_BASE + (20*3);   // PTBR value
[PROCESS_TABLE + (16*2) + 15] = 10;                     // PTLR value

[94*512] = [93 * 512 + 1];

//For Process -4

PTBR=PAGE_TABLE_BASE+(20*4);


//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 97;
[PTBR+5] = "0110";
[PTBR+6] = 98;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 99;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 100;
[PTBR+17] = "0110";
[PTBR+18] = 101;
[PTBR+19] = "0110";


PTLR = 10;

[PROCESS_TABLE +(16*4) + 1] = 4;
[PROCESS_TABLE + 4+(16*4)] = CREATED;
[PROCESS_TABLE +(16*4) + 11] = 102;

[PROCESS_TABLE +(16*4) + 13] = 8*512;

[PROCESS_TABLE +(16*4) + 12] = 0;
[PROCESS_TABLE + (16*4) + 14] = PAGE_TABLE_BASE + (20*4);   // PTBR value
[PROCESS_TABLE + (16*4) + 15] = 10;                     // PTLR value

[100*512] = [99 * 512 + 1];


//For Process -5

PTBR=PAGE_TABLE_BASE+(20*5);


//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 103;
[PTBR+5] = "0110";
[PTBR+6] = 104;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 105;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 106;
[PTBR+17] = "0110";
[PTBR+18] = 107;
[PTBR+19] = "0110";


PTLR = 10;

[PROCESS_TABLE +(16*5) + 1] = 5;
[PROCESS_TABLE + 4+(16*5)] = CREATED;
[PROCESS_TABLE +(16*5) + 11] = 108;

[PROCESS_TABLE +(16*5) + 13] = 8*512;

[PROCESS_TABLE +(16*5) + 12] = 0;
[PROCESS_TABLE + (16*5) + 14] = PAGE_TABLE_BASE + (20*5);   // PTBR value
[PROCESS_TABLE + (16*5) + 15] = 10;                     // PTLR value

[106*512] = [105 * 512 + 1];
